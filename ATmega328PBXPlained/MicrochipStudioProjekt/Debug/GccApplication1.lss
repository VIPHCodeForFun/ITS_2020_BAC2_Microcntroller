
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000004fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b11  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fc  00000000  00000000  000010c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003eb  00000000  00000000  00001abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ee  00000000  00000000  00001f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000248  00000000  00000000  00002456  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000269e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 09 01 	call	0x212	; 0x212 <main>
  d4:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <timeSetup>:
volatile uint32_t timecounter;

timeSetup()
{
	/* Set CTC-MODE */
	TCCR2A = (1 << WGM21);
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	
	/* Calculation prescaler */
	// 8 000 000 Hz = 0,125 ms
	// 2048us / 256 = 8 us
	// 8us / 0,125ms = 64
	TCCR2B = (1 << CS22);  // ATmega328PB p.237
  e2:	94 e0       	ldi	r25, 0x04	; 4
  e4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	
	// Compare Value = 2000us / 8 = 250 (We use 249, because 0 is also a value)
	OCR2A = 249; // ATmega328PB p.224 12.7.2
  e8:	99 ef       	ldi	r25, 0xF9	; 249
  ea:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	/* enable Timer Interrupt */
	TIMSK2 = (1 << OCIE2A);
  ee:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
}
  f2:	08 95       	ret

000000f4 <milliSeconds>:

uint32_t milliSeconds()
{
  f4:	8f 92       	push	r8
  f6:	9f 92       	push	r9
  f8:	af 92       	push	r10
  fa:	bf 92       	push	r11
  fc:	cf 92       	push	r12
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
	uint32_t currentTimerCounter = 0;
	uint32_t currentTimerValue = 0;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 104:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 106:	f8 94       	cli
 108:	21 e0       	ldi	r18, 0x01	; 1
}

uint32_t milliSeconds()
{
	uint32_t currentTimerCounter = 0;
	uint32_t currentTimerValue = 0;
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	cb 01       	movw	r24, r22
	TIMSK2 = (1 << OCIE2A);
}

uint32_t milliSeconds()
{
	uint32_t currentTimerCounter = 0;
 110:	c1 2c       	mov	r12, r1
 112:	d1 2c       	mov	r13, r1
 114:	76 01       	movw	r14, r12
	uint32_t currentTimerValue = 0;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 116:	0e c0       	rjmp	.+28     	; 0x134 <milliSeconds+0x40>
	{
		currentTimerCounter = timecounter;
 118:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 11c:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 120:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 124:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		currentTimerValue = TCNT2; // ATmega328PB p.224 12.7.2
 128:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
uint32_t milliSeconds()
{
	uint32_t currentTimerCounter = 0;
	uint32_t currentTimerValue = 0;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	21 11       	cpse	r18, r1
 136:	f0 cf       	rjmp	.-32     	; 0x118 <milliSeconds+0x24>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 138:	3f bf       	out	0x3f, r19	; 63
	{
		currentTimerCounter = timecounter;
		currentTimerValue = TCNT2; // ATmega328PB p.224 12.7.2
	}
	/* timecounter 1 = 2 milliSekonds ------> (*2) */
	currentTimerCounter = currentTimerCounter * 2; // mSekonds
 13a:	cc 0c       	add	r12, r12
 13c:	dd 1c       	adc	r13, r13
 13e:	ee 1c       	adc	r14, r14
 140:	ff 1c       	adc	r15, r15
	
	/* When the timer is over half (*0.5) round up */
	if (currentTimerValue >= OCR2A * 0.5) // ATmega328PB p.224 12.7.2
 142:	0e 94 1f 01 	call	0x23e	; 0x23e <__floatunsisf>
 146:	4b 01       	movw	r8, r22
 148:	5c 01       	movw	r10, r24
 14a:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 21 01 	call	0x242	; 0x242 <__floatsisf>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	5f e3       	ldi	r21, 0x3F	; 63
 160:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__mulsf3>
 164:	9b 01       	movw	r18, r22
 166:	ac 01       	movw	r20, r24
 168:	c5 01       	movw	r24, r10
 16a:	b4 01       	movw	r22, r8
 16c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__gesf2>
 170:	88 23       	and	r24, r24
 172:	3c f0       	brlt	.+14     	; 0x182 <milliSeconds+0x8e>
	{
		return currentTimerCounter + 1;
 174:	c7 01       	movw	r24, r14
 176:	b6 01       	movw	r22, r12
 178:	6f 5f       	subi	r22, 0xFF	; 255
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	8f 4f       	sbci	r24, 0xFF	; 255
 17e:	9f 4f       	sbci	r25, 0xFF	; 255
 180:	02 c0       	rjmp	.+4      	; 0x186 <milliSeconds+0x92>
	}
	return currentTimerCounter;
 182:	c7 01       	movw	r24, r14
 184:	b6 01       	movw	r22, r12
}
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	df 90       	pop	r13
 18c:	cf 90       	pop	r12
 18e:	bf 90       	pop	r11
 190:	af 90       	pop	r10
 192:	9f 90       	pop	r9
 194:	8f 90       	pop	r8
 196:	08 95       	ret

00000198 <delayMilli>:

void delayMilli(uint32_t milliSekondsDelay)
{
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	6b 01       	movw	r12, r22
 1a2:	7c 01       	movw	r14, r24
	/* Create Timestamp */
	uint32_t timeStamp = milliSeconds() + milliSekondsDelay;
 1a4:	0e 94 7a 00 	call	0xf4	; 0xf4 <milliSeconds>
 1a8:	c6 0e       	add	r12, r22
 1aa:	d7 1e       	adc	r13, r23
 1ac:	e8 1e       	adc	r14, r24
 1ae:	f9 1e       	adc	r15, r25
	
	while (timeStamp > milliSeconds())
 1b0:	0e 94 7a 00 	call	0xf4	; 0xf4 <milliSeconds>
 1b4:	6c 15       	cp	r22, r12
 1b6:	7d 05       	cpc	r23, r13
 1b8:	8e 05       	cpc	r24, r14
 1ba:	9f 05       	cpc	r25, r15
 1bc:	c8 f3       	brcs	.-14     	; 0x1b0 <delayMilli+0x18>
	{
		// Wait till Timestamp is reached
	}
}
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	df 90       	pop	r13
 1c4:	cf 90       	pop	r12
 1c6:	08 95       	ret

000001c8 <__vector_7>:

// Interrupt Service Routine (ISR) CTC-Modus
ISR(TIMER2_COMPA_vect) 
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
	timecounter++;
 1da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1de:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1e2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1e6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	a1 1d       	adc	r26, r1
 1ee:	b1 1d       	adc	r27, r1
 1f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1fc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	0f 90       	pop	r0
 20a:	0f be       	out	0x3f, r0	; 63
 20c:	0f 90       	pop	r0
 20e:	1f 90       	pop	r1
 210:	18 95       	reti

00000212 <main>:
/* END time */

int main(void)
{
	timeSetup();
 212:	0e 94 6e 00 	call	0xdc	; 0xdc <timeSetup>
	sei();
 216:	78 94       	sei
	
	/* Setup IO*/
	DDRB = 0b00000001; // set PIN0 as output
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000; // set PIN0 LOW
 21c:	15 b8       	out	0x05, r1	; 5
	
	while(1)
	{
		PORTB = 0b00000000; // set PIN0 LOW
 21e:	15 b8       	out	0x05, r1	; 5
		delayMilli(1000);	// 1 Sekond
 220:	68 ee       	ldi	r22, 0xE8	; 232
 222:	73 e0       	ldi	r23, 0x03	; 3
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 cc 00 	call	0x198	; 0x198 <delayMilli>
		PORTB = 0b00000001; // set PIN0 HIGH
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	85 b9       	out	0x05, r24	; 5
		delayMilli(1000);	// 1 Sekond
 230:	68 ee       	ldi	r22, 0xE8	; 232
 232:	73 e0       	ldi	r23, 0x03	; 3
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 cc 00 	call	0x198	; 0x198 <delayMilli>
 23c:	f0 cf       	rjmp	.-32     	; 0x21e <main+0xc>

0000023e <__floatunsisf>:
 23e:	e8 94       	clt
 240:	09 c0       	rjmp	.+18     	; 0x254 <__floatsisf+0x12>

00000242 <__floatsisf>:
 242:	97 fb       	bst	r25, 7
 244:	3e f4       	brtc	.+14     	; 0x254 <__floatsisf+0x12>
 246:	90 95       	com	r25
 248:	80 95       	com	r24
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	8f 4f       	sbci	r24, 0xFF	; 255
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	99 23       	and	r25, r25
 256:	a9 f0       	breq	.+42     	; 0x282 <__floatsisf+0x40>
 258:	f9 2f       	mov	r31, r25
 25a:	96 e9       	ldi	r25, 0x96	; 150
 25c:	bb 27       	eor	r27, r27
 25e:	93 95       	inc	r25
 260:	f6 95       	lsr	r31
 262:	87 95       	ror	r24
 264:	77 95       	ror	r23
 266:	67 95       	ror	r22
 268:	b7 95       	ror	r27
 26a:	f1 11       	cpse	r31, r1
 26c:	f8 cf       	rjmp	.-16     	; 0x25e <__floatsisf+0x1c>
 26e:	fa f4       	brpl	.+62     	; 0x2ae <__floatsisf+0x6c>
 270:	bb 0f       	add	r27, r27
 272:	11 f4       	brne	.+4      	; 0x278 <__floatsisf+0x36>
 274:	60 ff       	sbrs	r22, 0
 276:	1b c0       	rjmp	.+54     	; 0x2ae <__floatsisf+0x6c>
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	8f 4f       	sbci	r24, 0xFF	; 255
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	16 c0       	rjmp	.+44     	; 0x2ae <__floatsisf+0x6c>
 282:	88 23       	and	r24, r24
 284:	11 f0       	breq	.+4      	; 0x28a <__floatsisf+0x48>
 286:	96 e9       	ldi	r25, 0x96	; 150
 288:	11 c0       	rjmp	.+34     	; 0x2ac <__floatsisf+0x6a>
 28a:	77 23       	and	r23, r23
 28c:	21 f0       	breq	.+8      	; 0x296 <__floatsisf+0x54>
 28e:	9e e8       	ldi	r25, 0x8E	; 142
 290:	87 2f       	mov	r24, r23
 292:	76 2f       	mov	r23, r22
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <__floatsisf+0x5e>
 296:	66 23       	and	r22, r22
 298:	71 f0       	breq	.+28     	; 0x2b6 <__floatsisf+0x74>
 29a:	96 e8       	ldi	r25, 0x86	; 134
 29c:	86 2f       	mov	r24, r22
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	2a f0       	brmi	.+10     	; 0x2ae <__floatsisf+0x6c>
 2a4:	9a 95       	dec	r25
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	88 1f       	adc	r24, r24
 2ac:	da f7       	brpl	.-10     	; 0x2a4 <__floatsisf+0x62>
 2ae:	88 0f       	add	r24, r24
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	97 f9       	bld	r25, 7
 2b6:	08 95       	ret

000002b8 <__gesf2>:
 2b8:	0e 94 ce 01 	call	0x39c	; 0x39c <__fp_cmp>
 2bc:	08 f4       	brcc	.+2      	; 0x2c0 <__gesf2+0x8>
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	08 95       	ret

000002c2 <__mulsf3>:
 2c2:	0e 94 74 01 	call	0x2e8	; 0x2e8 <__mulsf3x>
 2c6:	0c 94 09 02 	jmp	0x412	; 0x412 <__fp_round>
 2ca:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <__fp_pscA>
 2ce:	38 f0       	brcs	.+14     	; 0x2de <__mulsf3+0x1c>
 2d0:	0e 94 02 02 	call	0x404	; 0x404 <__fp_pscB>
 2d4:	20 f0       	brcs	.+8      	; 0x2de <__mulsf3+0x1c>
 2d6:	95 23       	and	r25, r21
 2d8:	11 f0       	breq	.+4      	; 0x2de <__mulsf3+0x1c>
 2da:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 2de:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <__fp_nan>
 2e2:	11 24       	eor	r1, r1
 2e4:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>

000002e8 <__mulsf3x>:
 2e8:	0e 94 1a 02 	call	0x434	; 0x434 <__fp_split3>
 2ec:	70 f3       	brcs	.-36     	; 0x2ca <__mulsf3+0x8>

000002ee <__mulsf3_pse>:
 2ee:	95 9f       	mul	r25, r21
 2f0:	c1 f3       	breq	.-16     	; 0x2e2 <__mulsf3+0x20>
 2f2:	95 0f       	add	r25, r21
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	55 1f       	adc	r21, r21
 2f8:	62 9f       	mul	r22, r18
 2fa:	f0 01       	movw	r30, r0
 2fc:	72 9f       	mul	r23, r18
 2fe:	bb 27       	eor	r27, r27
 300:	f0 0d       	add	r31, r0
 302:	b1 1d       	adc	r27, r1
 304:	63 9f       	mul	r22, r19
 306:	aa 27       	eor	r26, r26
 308:	f0 0d       	add	r31, r0
 30a:	b1 1d       	adc	r27, r1
 30c:	aa 1f       	adc	r26, r26
 30e:	64 9f       	mul	r22, r20
 310:	66 27       	eor	r22, r22
 312:	b0 0d       	add	r27, r0
 314:	a1 1d       	adc	r26, r1
 316:	66 1f       	adc	r22, r22
 318:	82 9f       	mul	r24, r18
 31a:	22 27       	eor	r18, r18
 31c:	b0 0d       	add	r27, r0
 31e:	a1 1d       	adc	r26, r1
 320:	62 1f       	adc	r22, r18
 322:	73 9f       	mul	r23, r19
 324:	b0 0d       	add	r27, r0
 326:	a1 1d       	adc	r26, r1
 328:	62 1f       	adc	r22, r18
 32a:	83 9f       	mul	r24, r19
 32c:	a0 0d       	add	r26, r0
 32e:	61 1d       	adc	r22, r1
 330:	22 1f       	adc	r18, r18
 332:	74 9f       	mul	r23, r20
 334:	33 27       	eor	r19, r19
 336:	a0 0d       	add	r26, r0
 338:	61 1d       	adc	r22, r1
 33a:	23 1f       	adc	r18, r19
 33c:	84 9f       	mul	r24, r20
 33e:	60 0d       	add	r22, r0
 340:	21 1d       	adc	r18, r1
 342:	82 2f       	mov	r24, r18
 344:	76 2f       	mov	r23, r22
 346:	6a 2f       	mov	r22, r26
 348:	11 24       	eor	r1, r1
 34a:	9f 57       	subi	r25, 0x7F	; 127
 34c:	50 40       	sbci	r21, 0x00	; 0
 34e:	9a f0       	brmi	.+38     	; 0x376 <__mulsf3_pse+0x88>
 350:	f1 f0       	breq	.+60     	; 0x38e <__mulsf3_pse+0xa0>
 352:	88 23       	and	r24, r24
 354:	4a f0       	brmi	.+18     	; 0x368 <__mulsf3_pse+0x7a>
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	bb 1f       	adc	r27, r27
 35c:	66 1f       	adc	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	88 1f       	adc	r24, r24
 362:	91 50       	subi	r25, 0x01	; 1
 364:	50 40       	sbci	r21, 0x00	; 0
 366:	a9 f7       	brne	.-22     	; 0x352 <__mulsf3_pse+0x64>
 368:	9e 3f       	cpi	r25, 0xFE	; 254
 36a:	51 05       	cpc	r21, r1
 36c:	80 f0       	brcs	.+32     	; 0x38e <__mulsf3_pse+0xa0>
 36e:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__fp_inf>
 372:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_szero>
 376:	5f 3f       	cpi	r21, 0xFF	; 255
 378:	e4 f3       	brlt	.-8      	; 0x372 <__mulsf3_pse+0x84>
 37a:	98 3e       	cpi	r25, 0xE8	; 232
 37c:	d4 f3       	brlt	.-12     	; 0x372 <__mulsf3_pse+0x84>
 37e:	86 95       	lsr	r24
 380:	77 95       	ror	r23
 382:	67 95       	ror	r22
 384:	b7 95       	ror	r27
 386:	f7 95       	ror	r31
 388:	e7 95       	ror	r30
 38a:	9f 5f       	subi	r25, 0xFF	; 255
 38c:	c1 f7       	brne	.-16     	; 0x37e <__mulsf3_pse+0x90>
 38e:	fe 2b       	or	r31, r30
 390:	88 0f       	add	r24, r24
 392:	91 1d       	adc	r25, r1
 394:	96 95       	lsr	r25
 396:	87 95       	ror	r24
 398:	97 f9       	bld	r25, 7
 39a:	08 95       	ret

0000039c <__fp_cmp>:
 39c:	99 0f       	add	r25, r25
 39e:	00 08       	sbc	r0, r0
 3a0:	55 0f       	add	r21, r21
 3a2:	aa 0b       	sbc	r26, r26
 3a4:	e0 e8       	ldi	r30, 0x80	; 128
 3a6:	fe ef       	ldi	r31, 0xFE	; 254
 3a8:	16 16       	cp	r1, r22
 3aa:	17 06       	cpc	r1, r23
 3ac:	e8 07       	cpc	r30, r24
 3ae:	f9 07       	cpc	r31, r25
 3b0:	c0 f0       	brcs	.+48     	; 0x3e2 <__fp_cmp+0x46>
 3b2:	12 16       	cp	r1, r18
 3b4:	13 06       	cpc	r1, r19
 3b6:	e4 07       	cpc	r30, r20
 3b8:	f5 07       	cpc	r31, r21
 3ba:	98 f0       	brcs	.+38     	; 0x3e2 <__fp_cmp+0x46>
 3bc:	62 1b       	sub	r22, r18
 3be:	73 0b       	sbc	r23, r19
 3c0:	84 0b       	sbc	r24, r20
 3c2:	95 0b       	sbc	r25, r21
 3c4:	39 f4       	brne	.+14     	; 0x3d4 <__fp_cmp+0x38>
 3c6:	0a 26       	eor	r0, r26
 3c8:	61 f0       	breq	.+24     	; 0x3e2 <__fp_cmp+0x46>
 3ca:	23 2b       	or	r18, r19
 3cc:	24 2b       	or	r18, r20
 3ce:	25 2b       	or	r18, r21
 3d0:	21 f4       	brne	.+8      	; 0x3da <__fp_cmp+0x3e>
 3d2:	08 95       	ret
 3d4:	0a 26       	eor	r0, r26
 3d6:	09 f4       	brne	.+2      	; 0x3da <__fp_cmp+0x3e>
 3d8:	a1 40       	sbci	r26, 0x01	; 1
 3da:	a6 95       	lsr	r26
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	81 1d       	adc	r24, r1
 3e0:	81 1d       	adc	r24, r1
 3e2:	08 95       	ret

000003e4 <__fp_inf>:
 3e4:	97 f9       	bld	r25, 7
 3e6:	9f 67       	ori	r25, 0x7F	; 127
 3e8:	80 e8       	ldi	r24, 0x80	; 128
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	08 95       	ret

000003f0 <__fp_nan>:
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	80 ec       	ldi	r24, 0xC0	; 192
 3f4:	08 95       	ret

000003f6 <__fp_pscA>:
 3f6:	00 24       	eor	r0, r0
 3f8:	0a 94       	dec	r0
 3fa:	16 16       	cp	r1, r22
 3fc:	17 06       	cpc	r1, r23
 3fe:	18 06       	cpc	r1, r24
 400:	09 06       	cpc	r0, r25
 402:	08 95       	ret

00000404 <__fp_pscB>:
 404:	00 24       	eor	r0, r0
 406:	0a 94       	dec	r0
 408:	12 16       	cp	r1, r18
 40a:	13 06       	cpc	r1, r19
 40c:	14 06       	cpc	r1, r20
 40e:	05 06       	cpc	r0, r21
 410:	08 95       	ret

00000412 <__fp_round>:
 412:	09 2e       	mov	r0, r25
 414:	03 94       	inc	r0
 416:	00 0c       	add	r0, r0
 418:	11 f4       	brne	.+4      	; 0x41e <__fp_round+0xc>
 41a:	88 23       	and	r24, r24
 41c:	52 f0       	brmi	.+20     	; 0x432 <__fp_round+0x20>
 41e:	bb 0f       	add	r27, r27
 420:	40 f4       	brcc	.+16     	; 0x432 <__fp_round+0x20>
 422:	bf 2b       	or	r27, r31
 424:	11 f4       	brne	.+4      	; 0x42a <__fp_round+0x18>
 426:	60 ff       	sbrs	r22, 0
 428:	04 c0       	rjmp	.+8      	; 0x432 <__fp_round+0x20>
 42a:	6f 5f       	subi	r22, 0xFF	; 255
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	8f 4f       	sbci	r24, 0xFF	; 255
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	08 95       	ret

00000434 <__fp_split3>:
 434:	57 fd       	sbrc	r21, 7
 436:	90 58       	subi	r25, 0x80	; 128
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	59 f0       	breq	.+22     	; 0x454 <__fp_splitA+0x10>
 43e:	5f 3f       	cpi	r21, 0xFF	; 255
 440:	71 f0       	breq	.+28     	; 0x45e <__fp_splitA+0x1a>
 442:	47 95       	ror	r20

00000444 <__fp_splitA>:
 444:	88 0f       	add	r24, r24
 446:	97 fb       	bst	r25, 7
 448:	99 1f       	adc	r25, r25
 44a:	61 f0       	breq	.+24     	; 0x464 <__fp_splitA+0x20>
 44c:	9f 3f       	cpi	r25, 0xFF	; 255
 44e:	79 f0       	breq	.+30     	; 0x46e <__fp_splitA+0x2a>
 450:	87 95       	ror	r24
 452:	08 95       	ret
 454:	12 16       	cp	r1, r18
 456:	13 06       	cpc	r1, r19
 458:	14 06       	cpc	r1, r20
 45a:	55 1f       	adc	r21, r21
 45c:	f2 cf       	rjmp	.-28     	; 0x442 <__fp_split3+0xe>
 45e:	46 95       	lsr	r20
 460:	f1 df       	rcall	.-30     	; 0x444 <__fp_splitA>
 462:	08 c0       	rjmp	.+16     	; 0x474 <__fp_splitA+0x30>
 464:	16 16       	cp	r1, r22
 466:	17 06       	cpc	r1, r23
 468:	18 06       	cpc	r1, r24
 46a:	99 1f       	adc	r25, r25
 46c:	f1 cf       	rjmp	.-30     	; 0x450 <__fp_splitA+0xc>
 46e:	86 95       	lsr	r24
 470:	71 05       	cpc	r23, r1
 472:	61 05       	cpc	r22, r1
 474:	08 94       	sec
 476:	08 95       	ret

00000478 <__fp_zero>:
 478:	e8 94       	clt

0000047a <__fp_szero>:
 47a:	bb 27       	eor	r27, r27
 47c:	66 27       	eor	r22, r22
 47e:	77 27       	eor	r23, r23
 480:	cb 01       	movw	r24, r22
 482:	97 f9       	bld	r25, 7
 484:	08 95       	ret

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
