
CubeIDEProjekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e8  080003e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e8  080003e8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003e8  080003e8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e8  080003e8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e8  080003e8  000103e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ec  080003ec  000103ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003f0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d99  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042f  00000000  00000000  00020dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b8  00000000  00000000  00021200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000170  00000000  00000000  000213b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000014d2  00000000  00000000  00021528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c52  00000000  00000000  000229fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095737  00000000  00000000  0002464c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b9d83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000504  00000000  00000000  000b9dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003d0 	.word	0x080003d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080003d0 	.word	0x080003d0

080001c8 <main>:
/* Global Variables */
uint32_t timer2count;


int main(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	 __asm volatile ("cpsie i");  // Globale Interrupts aktivieren
 80001cc:	b662      	cpsie	i
	//__disable_irq();

	timer2count = 0;
 80001ce:	4b1e      	ldr	r3, [pc, #120]	; (8000248 <main+0x80>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]

	/*-- Setup GPIO--*/
	*RCC_AHBENR = (uint32_t)(1 << 17); 	// Bit 17 IOPAEN: I/O port A clock enable RM0316_Reference_manual p.149
 80001d4:	4b1d      	ldr	r3, [pc, #116]	; (800024c <main+0x84>)
 80001d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80001da:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER = 0; 					// Clear Moder - A0-A15 to 0 (input mode)
 80001dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
	*GPIOA_BSRR = 0; 					// Clear Moder - A0-A15 to 0 (input mode)
 80001e4:	4b1a      	ldr	r3, [pc, #104]	; (8000250 <main+0x88>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	601a      	str	r2, [r3, #0]
	*GPIOA_MODER |= (uint32_t)(1 << 2); // set PA1 (Pin 1) (p.237 MODER4[1:0]) to Output (01)
 80001ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	6013      	str	r3, [r2, #0]


	/*-- Setup Timer2 --*/
	*RCC_APB1ENR |= (uint32_t)(1 << 0); // TIM2EN: TIM2 timer clock enable 	RM0316_Reference_manual p.154
 80001fa:	4b16      	ldr	r3, [pc, #88]	; (8000254 <main+0x8c>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a15      	ldr	r2, [pc, #84]	; (8000254 <main+0x8c>)
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	6013      	str	r3, [r2, #0]
	*TIM2_PSC = 11;						// Set Prescaler
 8000206:	4b14      	ldr	r3, [pc, #80]	; (8000258 <main+0x90>)
 8000208:	220b      	movs	r2, #11
 800020a:	601a      	str	r2, [r3, #0]
	*TIM2_CNT = 0; 						// Set timer value to 0
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <main+0x94>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
	*TIM2_ARR = 72727;					// Set Compare Match value
 8000212:	4b13      	ldr	r3, [pc, #76]	; (8000260 <main+0x98>)
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <main+0x9c>)
 8000216:	601a      	str	r2, [r3, #0]
	*TIME2_CR1 |= (uint32_t)(1 << 0); 	// CEN: Counter enable 			   	RM0316_Reference_manual p.648
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6013      	str	r3, [r2, #0]


	while (1)
	{
		if(timer2count > 1000)
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <main+0x80>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000230:	d9fa      	bls.n	8000228 <main+0x60>
		{
		*GPIOA_BSRR |= (uint32_t)(1 << 1); // Set PA1 to HIGH
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <main+0x88>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a06      	ldr	r2, [pc, #24]	; (8000250 <main+0x88>)
 8000238:	f043 0302 	orr.w	r3, r3, #2
 800023c:	6013      	str	r3, [r2, #0]
		timer2count = 0;
 800023e:	4b02      	ldr	r3, [pc, #8]	; (8000248 <main+0x80>)
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
		if(timer2count > 1000)
 8000244:	e7f0      	b.n	8000228 <main+0x60>
 8000246:	bf00      	nop
 8000248:	20000020 	.word	0x20000020
 800024c:	40021014 	.word	0x40021014
 8000250:	48000018 	.word	0x48000018
 8000254:	4002101c 	.word	0x4002101c
 8000258:	40000028 	.word	0x40000028
 800025c:	40000024 	.word	0x40000024
 8000260:	4000002c 	.word	0x4000002c
 8000264:	00011c17 	.word	0x00011c17

08000268 <TIM2_IRQHandler>:
		}
	}
}

void TIM2_IRQHandler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
	timer2count++;
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <TIM2_IRQHandler+0x24>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	3301      	adds	r3, #1
 8000272:	4a06      	ldr	r2, [pc, #24]	; (800028c <TIM2_IRQHandler+0x24>)
 8000274:	6013      	str	r3, [r2, #0]
	// Clear the interrupt flag
	*TIME2_SR &= ~((uint32_t)(1 << 0));
 8000276:	4b06      	ldr	r3, [pc, #24]	; (8000290 <TIM2_IRQHandler+0x28>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a05      	ldr	r2, [pc, #20]	; (8000290 <TIM2_IRQHandler+0x28>)
 800027c:	f023 0301 	bic.w	r3, r3, #1
 8000280:	6013      	str	r3, [r2, #0]
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	20000020 	.word	0x20000020
 8000290:	40000010 	.word	0x40000010

08000294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000298:	e7fe      	b.n	8000298 <NMI_Handler+0x4>

0800029a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800029e:	e7fe      	b.n	800029e <HardFault_Handler+0x4>

080002a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <MemManage_Handler+0x4>

080002a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002aa:	e7fe      	b.n	80002aa <BusFault_Handler+0x4>

080002ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <UsageFault_Handler+0x4>

080002b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d2:	bf00      	nop
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr

080002dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e0:	f000 f83e 	bl	8000360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <SystemInit+0x20>)
 80002ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f2:	4a05      	ldr	r2, [pc, #20]	; (8000308 <SystemInit+0x20>)
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800030c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000344 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000310:	f7ff ffea 	bl	80002e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800033a:	f000 f825 	bl	8000388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800033e:	f7ff ff43 	bl	80001c8 <main>

08000342 <LoopForever>:

LoopForever:
    b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000344:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000350:	080003f0 	.word	0x080003f0
  ldr r2, =_sbss
 8000354:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000358:	20000028 	.word	0x20000028

0800035c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC1_2_IRQHandler>
	...

08000360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <HAL_IncTick+0x20>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	461a      	mov	r2, r3
 800036a:	4b06      	ldr	r3, [pc, #24]	; (8000384 <HAL_IncTick+0x24>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4413      	add	r3, r2
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <HAL_IncTick+0x24>)
 8000372:	6013      	str	r3, [r2, #0]
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	20000000 	.word	0x20000000
 8000384:	20000024 	.word	0x20000024

08000388 <__libc_init_array>:
 8000388:	b570      	push	{r4, r5, r6, lr}
 800038a:	4d0d      	ldr	r5, [pc, #52]	; (80003c0 <__libc_init_array+0x38>)
 800038c:	4c0d      	ldr	r4, [pc, #52]	; (80003c4 <__libc_init_array+0x3c>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	2600      	movs	r6, #0
 8000394:	42a6      	cmp	r6, r4
 8000396:	d109      	bne.n	80003ac <__libc_init_array+0x24>
 8000398:	4d0b      	ldr	r5, [pc, #44]	; (80003c8 <__libc_init_array+0x40>)
 800039a:	4c0c      	ldr	r4, [pc, #48]	; (80003cc <__libc_init_array+0x44>)
 800039c:	f000 f818 	bl	80003d0 <_init>
 80003a0:	1b64      	subs	r4, r4, r5
 80003a2:	10a4      	asrs	r4, r4, #2
 80003a4:	2600      	movs	r6, #0
 80003a6:	42a6      	cmp	r6, r4
 80003a8:	d105      	bne.n	80003b6 <__libc_init_array+0x2e>
 80003aa:	bd70      	pop	{r4, r5, r6, pc}
 80003ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b0:	4798      	blx	r3
 80003b2:	3601      	adds	r6, #1
 80003b4:	e7ee      	b.n	8000394 <__libc_init_array+0xc>
 80003b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ba:	4798      	blx	r3
 80003bc:	3601      	adds	r6, #1
 80003be:	e7f2      	b.n	80003a6 <__libc_init_array+0x1e>
 80003c0:	080003e8 	.word	0x080003e8
 80003c4:	080003e8 	.word	0x080003e8
 80003c8:	080003e8 	.word	0x080003e8
 80003cc:	080003ec 	.word	0x080003ec

080003d0 <_init>:
 80003d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d2:	bf00      	nop
 80003d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d6:	bc08      	pop	{r3}
 80003d8:	469e      	mov	lr, r3
 80003da:	4770      	bx	lr

080003dc <_fini>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr
