
Cube-led-with-for-delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000298  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000420  08000420  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000420  08000420  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000420  08000420  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000420  08000420  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000428  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f35  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000513  00000000  00000000  00020f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000188  00000000  00000000  00021660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000157a  00000000  00000000  000217e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001fff  00000000  00000000  00022d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091a59  00000000  00000000  00024d61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000b67ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000574  00000000  00000000  000b680c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000408 	.word	0x08000408

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000408 	.word	0x08000408

080001c8 <setupModeIO>:
 */
#include "hal/pin-hal.h"

// works FOR PORT A pins!!
void setupModeIO(uint8_t pin, uint8_t mode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	BIT_SET_PTR(RCC_AHBENR,17);	// Bit 17 IOPAEN: I/O port A clock enable RM0316_Reference_manual p.149
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <setupModeIO+0x50>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a0e      	ldr	r2, [pc, #56]	; (8000218 <setupModeIO+0x50>)
 80001de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001e2:	6013      	str	r3, [r2, #0]

	switch (mode) {
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d10f      	bne.n	800020a <setupModeIO+0x42>
	case OUTPUT:;
		// Calc ModerIndex bit [1,0] = Pin 0 , bit [3,2] Pin 1 , .... 	p.237
		uint8_t moderbit = pin * 2;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	005b      	lsls	r3, r3, #1
 80001ee:	73fb      	strb	r3, [r7, #15]
		BIT_SET_PTR(GPIOA_MODER,moderbit); // set PA1 (Pin 1) (p.237 MODER4[1:0]) to Output (01)
 80001f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	7bfa      	ldrb	r2, [r7, #15]
 80001f8:	2101      	movs	r1, #1
 80001fa:	fa01 f202 	lsl.w	r2, r1, r2
 80001fe:	4611      	mov	r1, r2
 8000200:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000204:	430b      	orrs	r3, r1
 8000206:	6013      	str	r3, [r2, #0]
		break;
 8000208:	e000      	b.n	800020c <setupModeIO+0x44>
	// case IMPUT:
	default:
		/* End switch (mode) */
		return;
 800020a:	bf00      	nop
	}
}
 800020c:	3714      	adds	r7, #20
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40021014 	.word	0x40021014

0800021c <setPin>:

void setPin(uint8_t pin)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	BIT_SET_PTR(GPIOA_BSRR,pin);
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <setPin+0x2c>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	79fa      	ldrb	r2, [r7, #7]
 800022c:	2101      	movs	r1, #1
 800022e:	fa01 f202 	lsl.w	r2, r1, r2
 8000232:	4611      	mov	r1, r2
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <setPin+0x2c>)
 8000236:	430b      	orrs	r3, r1
 8000238:	6013      	str	r3, [r2, #0]
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	48000018 	.word	0x48000018

0800024c <clearPin>:

void clearPin(uint8_t pin)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	71fb      	strb	r3, [r7, #7]
	BIT_SET_PTR(GPIOA_BRR,pin);
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <clearPin+0x2c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	79fa      	ldrb	r2, [r7, #7]
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	4611      	mov	r1, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <clearPin+0x2c>)
 8000266:	430b      	orrs	r3, r1
 8000268:	6013      	str	r3, [r2, #0]
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	48000028 	.word	0x48000028

0800027c <main>:
#include "hal/pin-hal.h"

#define PIN 1

int main(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
	/* Bootsection */
	setupModeIO(PIN, OUTPUT);
 8000282:	2101      	movs	r1, #1
 8000284:	2001      	movs	r0, #1
 8000286:	f7ff ff9f 	bl	80001c8 <setupModeIO>
	// Setup for delay
	uint32_t tick = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	607b      	str	r3, [r7, #4]
	uint32_t ticks = 1600000;
 800028e:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <main+0x4c>)
 8000290:	603b      	str	r3, [r7, #0]

	/* Programmsection */
	while (1) {
		for (tick = 0; tick < ticks; tick++) {
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	e002      	b.n	800029e <main+0x22>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3301      	adds	r3, #1
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3f8      	bcc.n	8000298 <main+0x1c>
			// Wait
		}
		setPin(PIN);
 80002a6:	2001      	movs	r0, #1
 80002a8:	f7ff ffb8 	bl	800021c <setPin>

		for (tick = 0; tick < ticks; tick++) {
 80002ac:	2300      	movs	r3, #0
 80002ae:	607b      	str	r3, [r7, #4]
 80002b0:	e002      	b.n	80002b8 <main+0x3c>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3301      	adds	r3, #1
 80002b6:	607b      	str	r3, [r7, #4]
 80002b8:	687a      	ldr	r2, [r7, #4]
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d3f8      	bcc.n	80002b2 <main+0x36>
			// Wait
		}
		clearPin(PIN);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f7ff ffc3 	bl	800024c <clearPin>
	while (1) {
 80002c6:	e7e4      	b.n	8000292 <main+0x16>
 80002c8:	00186a00 	.word	0x00186a00

080002cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002d0:	e7fe      	b.n	80002d0 <NMI_Handler+0x4>

080002d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d6:	e7fe      	b.n	80002d6 <HardFault_Handler+0x4>

080002d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002dc:	e7fe      	b.n	80002dc <MemManage_Handler+0x4>

080002de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <BusFault_Handler+0x4>

080002e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e8:	e7fe      	b.n	80002e8 <UsageFault_Handler+0x4>

080002ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002ea:	b480      	push	{r7}
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr

080002f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000306:	b480      	push	{r7}
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000318:	f000 f83e 	bl	8000398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}

08000320 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <SystemInit+0x20>)
 8000326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800032a:	4a05      	ldr	r2, [pc, #20]	; (8000340 <SystemInit+0x20>)
 800032c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800037c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000348:	f7ff ffea 	bl	8000320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000372:	f000 f825 	bl	80003c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000376:	f7ff ff81 	bl	800027c <main>

0800037a <LoopForever>:

LoopForever:
    b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800037c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000388:	08000428 	.word	0x08000428
  ldr r2, =_sbss
 800038c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000390:	20000024 	.word	0x20000024

08000394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC1_2_IRQHandler>
	...

08000398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <HAL_IncTick+0x20>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HAL_IncTick+0x24>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_IncTick+0x24>)
 80003aa:	6013      	str	r3, [r2, #0]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000020 	.word	0x20000020

080003c0 <__libc_init_array>:
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	4d0d      	ldr	r5, [pc, #52]	; (80003f8 <__libc_init_array+0x38>)
 80003c4:	4c0d      	ldr	r4, [pc, #52]	; (80003fc <__libc_init_array+0x3c>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	2600      	movs	r6, #0
 80003cc:	42a6      	cmp	r6, r4
 80003ce:	d109      	bne.n	80003e4 <__libc_init_array+0x24>
 80003d0:	4d0b      	ldr	r5, [pc, #44]	; (8000400 <__libc_init_array+0x40>)
 80003d2:	4c0c      	ldr	r4, [pc, #48]	; (8000404 <__libc_init_array+0x44>)
 80003d4:	f000 f818 	bl	8000408 <_init>
 80003d8:	1b64      	subs	r4, r4, r5
 80003da:	10a4      	asrs	r4, r4, #2
 80003dc:	2600      	movs	r6, #0
 80003de:	42a6      	cmp	r6, r4
 80003e0:	d105      	bne.n	80003ee <__libc_init_array+0x2e>
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e8:	4798      	blx	r3
 80003ea:	3601      	adds	r6, #1
 80003ec:	e7ee      	b.n	80003cc <__libc_init_array+0xc>
 80003ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f2:	4798      	blx	r3
 80003f4:	3601      	adds	r6, #1
 80003f6:	e7f2      	b.n	80003de <__libc_init_array+0x1e>
 80003f8:	08000420 	.word	0x08000420
 80003fc:	08000420 	.word	0x08000420
 8000400:	08000420 	.word	0x08000420
 8000404:	08000424 	.word	0x08000424

08000408 <_init>:
 8000408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040a:	bf00      	nop
 800040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040e:	bc08      	pop	{r3}
 8000410:	469e      	mov	lr, r3
 8000412:	4770      	bx	lr

08000414 <_fini>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr
