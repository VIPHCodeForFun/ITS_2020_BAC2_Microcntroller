
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d2c  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b14  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a0  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  0000245c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a3  00000000  00000000  00002574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cc  00000000  00000000  00002b17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002de3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_7>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  d4:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <setupModeIO>:
 *  Author: Philipp Vidmar
 */ 
#include "pin-hal.h"

void setupModeIO(uint8_t pin, uint8_t mode){
	switch(mode) {
  dc:	61 30       	cpi	r22, 0x01	; 1
  de:	79 f4       	brne	.+30     	; 0xfe <setupModeIO+0x22>
		case OUTPUT: 
			if (pin / 8 == 0){ // Pin 0-7 means DDRB 
  e0:	88 30       	cpi	r24, 0x08	; 8
  e2:	68 f4       	brcc	.+26     	; 0xfe <setupModeIO+0x22>
				// DDRx always 8 bit means 0-7 -> (pin % 8)
				BIT_SET(DDRB, (pin % 8));	
  e4:	44 b1       	in	r20, 0x04	; 4
  e6:	87 70       	andi	r24, 0x07	; 7
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <setupModeIO+0x18>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	8a 95       	dec	r24
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <setupModeIO+0x14>
  f8:	cb 01       	movw	r24, r22
  fa:	84 2b       	or	r24, r20
  fc:	84 b9       	out	0x04, r24	; 4
  fe:	08 95       	ret

00000100 <setPin>:
		default: return;
	}
}

void setPin(uint8_t pin){
	if (pin / 8 == 0){ //see setupModeIO
 100:	88 30       	cpi	r24, 0x08	; 8
 102:	68 f4       	brcc	.+26     	; 0x11e <setPin+0x1e>
		BIT_SET(PORTB, (pin % 8));
 104:	45 b1       	in	r20, 0x05	; 5
 106:	87 70       	andi	r24, 0x07	; 7
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <setPin+0x14>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <setPin+0x10>
 118:	cb 01       	movw	r24, r22
 11a:	84 2b       	or	r24, r20
 11c:	85 b9       	out	0x05, r24	; 5
 11e:	08 95       	ret

00000120 <clearPin>:
	}
}

void clearPin(uint8_t pin){
	if (pin / 8 == 0){ //see setupModeIO
 120:	88 30       	cpi	r24, 0x08	; 8
 122:	70 f4       	brcc	.+28     	; 0x140 <clearPin+0x20>
		BIT_CLR(PORTB, (pin % 8));
 124:	45 b1       	in	r20, 0x05	; 5
 126:	87 70       	andi	r24, 0x07	; 7
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <clearPin+0x14>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <clearPin+0x10>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	85 b9       	out	0x05, r24	; 5
 140:	08 95       	ret

00000142 <timeSetup>:
 */ 

#include "timer-hal.h"

void timeSetup(){
	BIT_SET(TCCR2A, 1); // p.197 WGM21 Set CTC-MODE
 142:	e0 eb       	ldi	r30, 0xB0	; 176
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 83       	st	Z, r24
	/* Calculation prescaler */
	// 16 000 000 - 1/f=s -> 6,25 * 10^-8sek
	// 2048us / 256 countersteps = 8 us
	// 8us / 6,25*10^-8 sek = 128			
	
	BIT_SET(TCCR2B, 0); // p.197 CS20 Pres. to 128
 14c:	e1 eb       	ldi	r30, 0xB1	; 177
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	81 60       	ori	r24, 0x01	; 1
 154:	80 83       	st	Z, r24
	BIT_SET(TCCR2B, 2); // p.197 CA22  
 156:	80 81       	ld	r24, Z
 158:	84 60       	ori	r24, 0x04	; 4
 15a:	80 83       	st	Z, r24
		
	// Compare Value = 2000us / 8 = 250 (We use 249, because 0 is also a value)
	*OCR2A = 249;
 15c:	89 ef       	ldi	r24, 0xF9	; 249
 15e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	
	/* enable Timer Interrupt */
	BIT_SET(TIMSK2, 1); // p.200 OCIE2A 
 162:	e0 e7       	ldi	r30, 0x70	; 112
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	80 83       	st	Z, r24
 16c:	08 95       	ret

0000016e <milliSeconds>:
}

uint32_t milliSeconds()
{
 16e:	8f 92       	push	r8
 170:	9f 92       	push	r9
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
	uint32_t currentTimerCounter = 0;
	uint32_t currentTimerValue = 0;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 17e:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 180:	f8 94       	cli
 182:	21 e0       	ldi	r18, 0x01	; 1
}

uint32_t milliSeconds()
{
	uint32_t currentTimerCounter = 0;
	uint32_t currentTimerValue = 0;
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	cb 01       	movw	r24, r22
	BIT_SET(TIMSK2, 1); // p.200 OCIE2A 
}

uint32_t milliSeconds()
{
	uint32_t currentTimerCounter = 0;
 18a:	c1 2c       	mov	r12, r1
 18c:	d1 2c       	mov	r13, r1
 18e:	76 01       	movw	r14, r12
	uint32_t currentTimerValue = 0;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 190:	0e c0       	rjmp	.+28     	; 0x1ae <milliSeconds+0x40>
	{
		currentTimerCounter = TIME_COUNTER;
 192:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 196:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 19a:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 19e:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
		currentTimerValue = *TCNT2;
 1a2:	60 91 b2 00 	lds	r22, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
uint32_t milliSeconds()
{
	uint32_t currentTimerCounter = 0;
	uint32_t currentTimerValue = 0;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	21 11       	cpse	r18, r1
 1b0:	f0 cf       	rjmp	.-32     	; 0x192 <milliSeconds+0x24>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1b2:	3f bf       	out	0x3f, r19	; 63
	{
		currentTimerCounter = TIME_COUNTER;
		currentTimerValue = *TCNT2;
	}
	/* timecounter 1 = 2 milliSekonds ------> (*2) */
	currentTimerCounter = currentTimerCounter * 2; // mSekonds
 1b4:	cc 0c       	add	r12, r12
 1b6:	dd 1c       	adc	r13, r13
 1b8:	ee 1c       	adc	r14, r14
 1ba:	ff 1c       	adc	r15, r15
	
	/* When the timer is over half (*0.5) round up */
	if (currentTimerValue >= (*OCR2A) * 0.5){
 1bc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__floatunsisf>
 1c0:	4b 01       	movw	r8, r22
 1c2:	5c 01       	movw	r10, r24
 1c4:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__floatsisf>
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	5f e3       	ldi	r21, 0x3F	; 63
 1da:	0e 94 a3 01 	call	0x346	; 0x346 <__mulsf3>
 1de:	9b 01       	movw	r18, r22
 1e0:	ac 01       	movw	r20, r24
 1e2:	c5 01       	movw	r24, r10
 1e4:	b4 01       	movw	r22, r8
 1e6:	0e 94 9e 01 	call	0x33c	; 0x33c <__gesf2>
 1ea:	88 23       	and	r24, r24
 1ec:	3c f0       	brlt	.+14     	; 0x1fc <milliSeconds+0x8e>
		return currentTimerCounter + 1;
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	6f 5f       	subi	r22, 0xFF	; 255
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255
 1f6:	8f 4f       	sbci	r24, 0xFF	; 255
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <milliSeconds+0x92>
	}
	return currentTimerCounter;
 1fc:	c7 01       	movw	r24, r14
 1fe:	b6 01       	movw	r22, r12
}
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	bf 90       	pop	r11
 20a:	af 90       	pop	r10
 20c:	9f 90       	pop	r9
 20e:	8f 90       	pop	r8
 210:	08 95       	ret

00000212 <delayMilli>:

void delayMilli(uint32_t milliSekondsDelay){
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	6b 01       	movw	r12, r22
 21c:	7c 01       	movw	r14, r24
		/* Create Timestamp */
		uint32_t timeStamp = milliSeconds() + milliSekondsDelay;
 21e:	0e 94 b7 00 	call	0x16e	; 0x16e <milliSeconds>
 222:	c6 0e       	add	r12, r22
 224:	d7 1e       	adc	r13, r23
 226:	e8 1e       	adc	r14, r24
 228:	f9 1e       	adc	r15, r25
		while (timeStamp > milliSeconds()){
 22a:	0e 94 b7 00 	call	0x16e	; 0x16e <milliSeconds>
 22e:	6c 15       	cp	r22, r12
 230:	7d 05       	cpc	r23, r13
 232:	8e 05       	cpc	r24, r14
 234:	9f 05       	cpc	r25, r15
 236:	c8 f3       	brcs	.-14     	; 0x22a <delayMilli+0x18>
			// Wait till Timestamp is reached
		}
}
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	08 95       	ret

00000242 <__vector_7>:

ISR(TIMER2_COMPA_vect){
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
	TIME_COUNTER++;
 254:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 258:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 260:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	a1 1d       	adc	r26, r1
 268:	b1 1d       	adc	r27, r1
 26a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 26e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 272:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 276:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 27a:	bf 91       	pop	r27
 27c:	af 91       	pop	r26
 27e:	9f 91       	pop	r25
 280:	8f 91       	pop	r24
 282:	0f 90       	pop	r0
 284:	0f be       	out	0x3f, r0	; 63
 286:	0f 90       	pop	r0
 288:	1f 90       	pop	r1
 28a:	18 95       	reti

0000028c <main>:
#include "hal/timer-hal.h"

int main(void)
{
	/* Setup */
	setupModeIO(PIN0 , OUTPUT);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	0e 94 6e 00 	call	0xdc	; 0xdc <setupModeIO>

	/* Setup clock delay */
	timeSetup();
 294:	0e 94 a1 00 	call	0x142	; 0x142 <timeSetup>
	sei();
 298:	78 94       	sei
	
	while(1){
		setPin(PIN0);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 80 00 	call	0x100	; 0x100 <setPin>
		delayMilli(1000);
 2a2:	68 ee       	ldi	r22, 0xE8	; 232
 2a4:	73 e0       	ldi	r23, 0x03	; 3
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 09 01 	call	0x212	; 0x212 <delayMilli>
		clearPin(PIN0);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 90 00 	call	0x120	; 0x120 <clearPin>
		delayMilli(1000);
 2b4:	68 ee       	ldi	r22, 0xE8	; 232
 2b6:	73 e0       	ldi	r23, 0x03	; 3
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 09 01 	call	0x212	; 0x212 <delayMilli>
 2c0:	ec cf       	rjmp	.-40     	; 0x29a <main+0xe>

000002c2 <__floatunsisf>:
 2c2:	e8 94       	clt
 2c4:	09 c0       	rjmp	.+18     	; 0x2d8 <__floatsisf+0x12>

000002c6 <__floatsisf>:
 2c6:	97 fb       	bst	r25, 7
 2c8:	3e f4       	brtc	.+14     	; 0x2d8 <__floatsisf+0x12>
 2ca:	90 95       	com	r25
 2cc:	80 95       	com	r24
 2ce:	70 95       	com	r23
 2d0:	61 95       	neg	r22
 2d2:	7f 4f       	sbci	r23, 0xFF	; 255
 2d4:	8f 4f       	sbci	r24, 0xFF	; 255
 2d6:	9f 4f       	sbci	r25, 0xFF	; 255
 2d8:	99 23       	and	r25, r25
 2da:	a9 f0       	breq	.+42     	; 0x306 <__floatsisf+0x40>
 2dc:	f9 2f       	mov	r31, r25
 2de:	96 e9       	ldi	r25, 0x96	; 150
 2e0:	bb 27       	eor	r27, r27
 2e2:	93 95       	inc	r25
 2e4:	f6 95       	lsr	r31
 2e6:	87 95       	ror	r24
 2e8:	77 95       	ror	r23
 2ea:	67 95       	ror	r22
 2ec:	b7 95       	ror	r27
 2ee:	f1 11       	cpse	r31, r1
 2f0:	f8 cf       	rjmp	.-16     	; 0x2e2 <__floatsisf+0x1c>
 2f2:	fa f4       	brpl	.+62     	; 0x332 <__floatsisf+0x6c>
 2f4:	bb 0f       	add	r27, r27
 2f6:	11 f4       	brne	.+4      	; 0x2fc <__floatsisf+0x36>
 2f8:	60 ff       	sbrs	r22, 0
 2fa:	1b c0       	rjmp	.+54     	; 0x332 <__floatsisf+0x6c>
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	8f 4f       	sbci	r24, 0xFF	; 255
 302:	9f 4f       	sbci	r25, 0xFF	; 255
 304:	16 c0       	rjmp	.+44     	; 0x332 <__floatsisf+0x6c>
 306:	88 23       	and	r24, r24
 308:	11 f0       	breq	.+4      	; 0x30e <__floatsisf+0x48>
 30a:	96 e9       	ldi	r25, 0x96	; 150
 30c:	11 c0       	rjmp	.+34     	; 0x330 <__floatsisf+0x6a>
 30e:	77 23       	and	r23, r23
 310:	21 f0       	breq	.+8      	; 0x31a <__floatsisf+0x54>
 312:	9e e8       	ldi	r25, 0x8E	; 142
 314:	87 2f       	mov	r24, r23
 316:	76 2f       	mov	r23, r22
 318:	05 c0       	rjmp	.+10     	; 0x324 <__floatsisf+0x5e>
 31a:	66 23       	and	r22, r22
 31c:	71 f0       	breq	.+28     	; 0x33a <__floatsisf+0x74>
 31e:	96 e8       	ldi	r25, 0x86	; 134
 320:	86 2f       	mov	r24, r22
 322:	70 e0       	ldi	r23, 0x00	; 0
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	2a f0       	brmi	.+10     	; 0x332 <__floatsisf+0x6c>
 328:	9a 95       	dec	r25
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	88 1f       	adc	r24, r24
 330:	da f7       	brpl	.-10     	; 0x328 <__floatsisf+0x62>
 332:	88 0f       	add	r24, r24
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	97 f9       	bld	r25, 7
 33a:	08 95       	ret

0000033c <__gesf2>:
 33c:	0e 94 10 02 	call	0x420	; 0x420 <__fp_cmp>
 340:	08 f4       	brcc	.+2      	; 0x344 <__gesf2+0x8>
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	08 95       	ret

00000346 <__mulsf3>:
 346:	0e 94 b6 01 	call	0x36c	; 0x36c <__mulsf3x>
 34a:	0c 94 4b 02 	jmp	0x496	; 0x496 <__fp_round>
 34e:	0e 94 3d 02 	call	0x47a	; 0x47a <__fp_pscA>
 352:	38 f0       	brcs	.+14     	; 0x362 <__mulsf3+0x1c>
 354:	0e 94 44 02 	call	0x488	; 0x488 <__fp_pscB>
 358:	20 f0       	brcs	.+8      	; 0x362 <__mulsf3+0x1c>
 35a:	95 23       	and	r25, r21
 35c:	11 f0       	breq	.+4      	; 0x362 <__mulsf3+0x1c>
 35e:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_inf>
 362:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_nan>
 366:	11 24       	eor	r1, r1
 368:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__fp_szero>

0000036c <__mulsf3x>:
 36c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <__fp_split3>
 370:	70 f3       	brcs	.-36     	; 0x34e <__mulsf3+0x8>

00000372 <__mulsf3_pse>:
 372:	95 9f       	mul	r25, r21
 374:	c1 f3       	breq	.-16     	; 0x366 <__mulsf3+0x20>
 376:	95 0f       	add	r25, r21
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	55 1f       	adc	r21, r21
 37c:	62 9f       	mul	r22, r18
 37e:	f0 01       	movw	r30, r0
 380:	72 9f       	mul	r23, r18
 382:	bb 27       	eor	r27, r27
 384:	f0 0d       	add	r31, r0
 386:	b1 1d       	adc	r27, r1
 388:	63 9f       	mul	r22, r19
 38a:	aa 27       	eor	r26, r26
 38c:	f0 0d       	add	r31, r0
 38e:	b1 1d       	adc	r27, r1
 390:	aa 1f       	adc	r26, r26
 392:	64 9f       	mul	r22, r20
 394:	66 27       	eor	r22, r22
 396:	b0 0d       	add	r27, r0
 398:	a1 1d       	adc	r26, r1
 39a:	66 1f       	adc	r22, r22
 39c:	82 9f       	mul	r24, r18
 39e:	22 27       	eor	r18, r18
 3a0:	b0 0d       	add	r27, r0
 3a2:	a1 1d       	adc	r26, r1
 3a4:	62 1f       	adc	r22, r18
 3a6:	73 9f       	mul	r23, r19
 3a8:	b0 0d       	add	r27, r0
 3aa:	a1 1d       	adc	r26, r1
 3ac:	62 1f       	adc	r22, r18
 3ae:	83 9f       	mul	r24, r19
 3b0:	a0 0d       	add	r26, r0
 3b2:	61 1d       	adc	r22, r1
 3b4:	22 1f       	adc	r18, r18
 3b6:	74 9f       	mul	r23, r20
 3b8:	33 27       	eor	r19, r19
 3ba:	a0 0d       	add	r26, r0
 3bc:	61 1d       	adc	r22, r1
 3be:	23 1f       	adc	r18, r19
 3c0:	84 9f       	mul	r24, r20
 3c2:	60 0d       	add	r22, r0
 3c4:	21 1d       	adc	r18, r1
 3c6:	82 2f       	mov	r24, r18
 3c8:	76 2f       	mov	r23, r22
 3ca:	6a 2f       	mov	r22, r26
 3cc:	11 24       	eor	r1, r1
 3ce:	9f 57       	subi	r25, 0x7F	; 127
 3d0:	50 40       	sbci	r21, 0x00	; 0
 3d2:	9a f0       	brmi	.+38     	; 0x3fa <__mulsf3_pse+0x88>
 3d4:	f1 f0       	breq	.+60     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3d6:	88 23       	and	r24, r24
 3d8:	4a f0       	brmi	.+18     	; 0x3ec <__mulsf3_pse+0x7a>
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	bb 1f       	adc	r27, r27
 3e0:	66 1f       	adc	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	91 50       	subi	r25, 0x01	; 1
 3e8:	50 40       	sbci	r21, 0x00	; 0
 3ea:	a9 f7       	brne	.-22     	; 0x3d6 <__mulsf3_pse+0x64>
 3ec:	9e 3f       	cpi	r25, 0xFE	; 254
 3ee:	51 05       	cpc	r21, r1
 3f0:	80 f0       	brcs	.+32     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3f2:	0c 94 34 02 	jmp	0x468	; 0x468 <__fp_inf>
 3f6:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__fp_szero>
 3fa:	5f 3f       	cpi	r21, 0xFF	; 255
 3fc:	e4 f3       	brlt	.-8      	; 0x3f6 <__mulsf3_pse+0x84>
 3fe:	98 3e       	cpi	r25, 0xE8	; 232
 400:	d4 f3       	brlt	.-12     	; 0x3f6 <__mulsf3_pse+0x84>
 402:	86 95       	lsr	r24
 404:	77 95       	ror	r23
 406:	67 95       	ror	r22
 408:	b7 95       	ror	r27
 40a:	f7 95       	ror	r31
 40c:	e7 95       	ror	r30
 40e:	9f 5f       	subi	r25, 0xFF	; 255
 410:	c1 f7       	brne	.-16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 412:	fe 2b       	or	r31, r30
 414:	88 0f       	add	r24, r24
 416:	91 1d       	adc	r25, r1
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	97 f9       	bld	r25, 7
 41e:	08 95       	ret

00000420 <__fp_cmp>:
 420:	99 0f       	add	r25, r25
 422:	00 08       	sbc	r0, r0
 424:	55 0f       	add	r21, r21
 426:	aa 0b       	sbc	r26, r26
 428:	e0 e8       	ldi	r30, 0x80	; 128
 42a:	fe ef       	ldi	r31, 0xFE	; 254
 42c:	16 16       	cp	r1, r22
 42e:	17 06       	cpc	r1, r23
 430:	e8 07       	cpc	r30, r24
 432:	f9 07       	cpc	r31, r25
 434:	c0 f0       	brcs	.+48     	; 0x466 <__fp_cmp+0x46>
 436:	12 16       	cp	r1, r18
 438:	13 06       	cpc	r1, r19
 43a:	e4 07       	cpc	r30, r20
 43c:	f5 07       	cpc	r31, r21
 43e:	98 f0       	brcs	.+38     	; 0x466 <__fp_cmp+0x46>
 440:	62 1b       	sub	r22, r18
 442:	73 0b       	sbc	r23, r19
 444:	84 0b       	sbc	r24, r20
 446:	95 0b       	sbc	r25, r21
 448:	39 f4       	brne	.+14     	; 0x458 <__fp_cmp+0x38>
 44a:	0a 26       	eor	r0, r26
 44c:	61 f0       	breq	.+24     	; 0x466 <__fp_cmp+0x46>
 44e:	23 2b       	or	r18, r19
 450:	24 2b       	or	r18, r20
 452:	25 2b       	or	r18, r21
 454:	21 f4       	brne	.+8      	; 0x45e <__fp_cmp+0x3e>
 456:	08 95       	ret
 458:	0a 26       	eor	r0, r26
 45a:	09 f4       	brne	.+2      	; 0x45e <__fp_cmp+0x3e>
 45c:	a1 40       	sbci	r26, 0x01	; 1
 45e:	a6 95       	lsr	r26
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	81 1d       	adc	r24, r1
 464:	81 1d       	adc	r24, r1
 466:	08 95       	ret

00000468 <__fp_inf>:
 468:	97 f9       	bld	r25, 7
 46a:	9f 67       	ori	r25, 0x7F	; 127
 46c:	80 e8       	ldi	r24, 0x80	; 128
 46e:	70 e0       	ldi	r23, 0x00	; 0
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	08 95       	ret

00000474 <__fp_nan>:
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	80 ec       	ldi	r24, 0xC0	; 192
 478:	08 95       	ret

0000047a <__fp_pscA>:
 47a:	00 24       	eor	r0, r0
 47c:	0a 94       	dec	r0
 47e:	16 16       	cp	r1, r22
 480:	17 06       	cpc	r1, r23
 482:	18 06       	cpc	r1, r24
 484:	09 06       	cpc	r0, r25
 486:	08 95       	ret

00000488 <__fp_pscB>:
 488:	00 24       	eor	r0, r0
 48a:	0a 94       	dec	r0
 48c:	12 16       	cp	r1, r18
 48e:	13 06       	cpc	r1, r19
 490:	14 06       	cpc	r1, r20
 492:	05 06       	cpc	r0, r21
 494:	08 95       	ret

00000496 <__fp_round>:
 496:	09 2e       	mov	r0, r25
 498:	03 94       	inc	r0
 49a:	00 0c       	add	r0, r0
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__fp_round+0xc>
 49e:	88 23       	and	r24, r24
 4a0:	52 f0       	brmi	.+20     	; 0x4b6 <__fp_round+0x20>
 4a2:	bb 0f       	add	r27, r27
 4a4:	40 f4       	brcc	.+16     	; 0x4b6 <__fp_round+0x20>
 4a6:	bf 2b       	or	r27, r31
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__fp_round+0x18>
 4aa:	60 ff       	sbrs	r22, 0
 4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <__fp_round+0x20>
 4ae:	6f 5f       	subi	r22, 0xFF	; 255
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	08 95       	ret

000004b8 <__fp_split3>:
 4b8:	57 fd       	sbrc	r21, 7
 4ba:	90 58       	subi	r25, 0x80	; 128
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <__fp_splitA+0x10>
 4c2:	5f 3f       	cpi	r21, 0xFF	; 255
 4c4:	71 f0       	breq	.+28     	; 0x4e2 <__fp_splitA+0x1a>
 4c6:	47 95       	ror	r20

000004c8 <__fp_splitA>:
 4c8:	88 0f       	add	r24, r24
 4ca:	97 fb       	bst	r25, 7
 4cc:	99 1f       	adc	r25, r25
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <__fp_splitA+0x20>
 4d0:	9f 3f       	cpi	r25, 0xFF	; 255
 4d2:	79 f0       	breq	.+30     	; 0x4f2 <__fp_splitA+0x2a>
 4d4:	87 95       	ror	r24
 4d6:	08 95       	ret
 4d8:	12 16       	cp	r1, r18
 4da:	13 06       	cpc	r1, r19
 4dc:	14 06       	cpc	r1, r20
 4de:	55 1f       	adc	r21, r21
 4e0:	f2 cf       	rjmp	.-28     	; 0x4c6 <__fp_split3+0xe>
 4e2:	46 95       	lsr	r20
 4e4:	f1 df       	rcall	.-30     	; 0x4c8 <__fp_splitA>
 4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <__fp_splitA+0x30>
 4e8:	16 16       	cp	r1, r22
 4ea:	17 06       	cpc	r1, r23
 4ec:	18 06       	cpc	r1, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	f1 cf       	rjmp	.-30     	; 0x4d4 <__fp_splitA+0xc>
 4f2:	86 95       	lsr	r24
 4f4:	71 05       	cpc	r23, r1
 4f6:	61 05       	cpc	r22, r1
 4f8:	08 94       	sec
 4fa:	08 95       	ret

000004fc <__fp_zero>:
 4fc:	e8 94       	clt

000004fe <__fp_szero>:
 4fe:	bb 27       	eor	r27, r27
 500:	66 27       	eor	r22, r22
 502:	77 27       	eor	r23, r23
 504:	cb 01       	movw	r24, r22
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
